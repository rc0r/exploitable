#!/usr/bin/env python

# The MIT License (MIT)
# 
# Copyright (c) 2013 Jonathan Foote
#           (c) 2015 rc0r
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

from setuptools.command.install import install
from setuptools import setup, Command

import os
import subprocess
import shlex
import re


class CustomInstall(install):
    """
    Our custom install class that overrides the
    default distutils install procedure.
    """
    description = "Install exploitable to gdb command directory."
    install.user_options.append(('gdbpath=', None,
                                 'Gdb data directory, omit to enable auto-detection.'))

    def initialize_options(self):
        self.gdbpath = None
        # Dirty hacks to avoid easy_install errors.
        # Highly experimental!
        self.root = None
        self.build_lib = ''
        self.compile = False
        self.optimize = False
        self.skip_build = 1
        self.single_version_externally_managed = False
        self.record = False

    def finalize_options(self):
        if not self.gdbpath:
            self.gdbpath = gdb_data_dir()

    def run(self):
        # run default setup procedure
        # install.run(self)

        # perform gdb setup
        self.gdb_cmd_path = os.path.join(self.gdbpath, 'python', 'gdb', 'command')

        run("cp -R exploitable/ %s/exploitable_lib" % self.gdb_cmd_path)
        run("touch %s/exploitable_lib/__init__.py" % self.gdb_cmd_path)
        run("cp gdb_install_stub.py %s/exploitable.py" % self.gdb_cmd_path)


class UninstallCommand(Command):
    """
    Custom uninstall command.
    """
    description = 'Uninstall exploitable from gdb command directory.'
    user_options = [
        ('gdbpath=', None, 'Gdb data directory, omit to enable auto-detection.'),
    ]

    def initialize_options(self):
        self.gdbpath = None

    def finalize_options(self):
        if not self.gdbpath:
            self.gdbpath = gdb_data_dir()

    def run(self):
        self.gdb_cmd_path = os.path.join(self.gdbpath, 'python', 'gdb', 'command')

        run("rm %s/exploitable.py" % self.gdb_cmd_path)
        run("rm -rf %s/exploitable_lib" % self.gdb_cmd_path)


class TestCommand(Command):
    """
    Custom test command.
    """
    description = 'Run exploitable tests.'
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        print("testing for x86, for ARM and more args, see scripts in test/ dir")
        run("test/x86.sh build run_test clean")
        print("done")


def run(cmd):
    try:
        print(cmd)
        subprocess.check_call(shlex.split(cmd))
    except subprocess.CalledProcessError:
        pass


def gdb_data_dir():
    path = subprocess.check_output(shlex.split(
            "gdb --batch -ex 'show data-directory'")).strip()
    match = re.match("^.*\"(.*)\".*$", path.decode(errors='replace'))
    if not match:
        raise Exception("GDB data directory parse command failed, "
                "make sure GDB is installed and try specifying a path "
                "manually")
    path = match.groups()[0]
    print("Target path is %s" % path)
    return path


dependencies = []

setup(
    name='exploitable',
    version='1.32-rcor',
    url='https://github.com/rc0r/exploitable',
    author='rc0r',
    author_email='hlt99@blinkenshell.org',
    description='A modified version of the \'exploitable\' GDB plugin.',
    long_description=open('./README.md', 'r').read(),
    requires=dependencies,
    platforms=[
        'Any'
    ],
    scripts=[],
    cmdclass={
        'install': CustomInstall,
        'uninstall': UninstallCommand,
        'test': TestCommand
    }
)
